/*
 * This file is part of the GAMS Studio project.
 *
 * Generated by gamsoptions.py
 *
 * Copyright (c) 2017-2023 GAMS Software GmbH <support@gams.com>
 * Copyright (c) 2017-2023 GAMS Development Corp. <support@gams.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef SYNTAXDATA_H
#define SYNTAXDATA_H

#include <QList>
#include <QString>
#include <QPair>

namespace gams {
namespace studio {
namespace syntax {

class SyntaxData
{
    SyntaxData() {}
public:
    static const QList<QPair<QString, QString>> directives() {
        static const QList<QPair<QString, QString>> list = {
            {"onExternalInput", "External input on"},
            {"offExternalInput", "External input off"},
            {"onExternalOutput", "External output on"},
            {"offExternalOutput", "External output off"},
            {"onIDCProtect", "Protect external input symbols from being changed at execution time"},
            {"offIDCProtect", "Allow to change external input symbols at execution time"},
            {"onMargin", "Margin marking on"},
            {"offMargin", "Margin marking off"},
            {"minCol", "Set left data margin"},
            {"maxCol", "Set right data margin"},
            {"comment", "Reset comment symbol"},
            {"dollar", "Reset dollar symbol"},
            {"onDigit", "Do not allow excess precision in constants"},
            {"offDigit", "Ignore excess precision in constants"},
            {"hidden", "Hidden comment line"},
            {"onText", "Start of block comment"},
            {"offText", "End of block comment"},
            {"onUpper", "Uppercase listing file on"},
            {"offUpper", "Uppercase listing file off"},
            {"single", "Single space input in listing file"},
            {"double", "Double space input in listing file"},
            {"lines", "Eject listing if less than n lines"},
            {"title", "Set listing page title"},
            {"sTitle", "Set listing page subtitle"},
            {"onSymList", "Produce symbol list"},
            {"offSymList", "Do not produce symbol list"},
            {"onUelList", "Produce UEL list"},
            {"offUelList", "Do not produce UEL list"},
            {"onSymXRef", "Collect symbols for cross reference list"},
            {"offSymXRef", "Do not collect symbols for cross reference list"},
            {"onUelXRef", "Collect UELs for cross reference list"},
            {"offUelXRef", "Do not collect UELs for cross reference list"},
            {"debug", "Debugging options"},
            {"onDollar", "Show dollar control lines on"},
            {"offDollar", "Show dollar control lines off"},
            {"phantom", "Define phantom element"},
            {"version", "Test GAMS compiler version number"},
            {"call", "Execute another program"},
            {"callAsync", "Execute another program async (inherit console)"},
            {"callAsyncIC", "Execute another program async (inherit console)"},
            {"callAsyncNC", "Execute another program async (new console)"},
            {"hiddenCall", "Execute another program (hidden)"},
            {"include", "Include file from working directory"},
            {"onInclude", "Include message on"},
            {"offInclude", "Include message off"},
            {"sysInclude", "Include file from system directory"},
            {"libInclude", "Include file from library directory"},
            {"insert", "Insert external procedure information"},
            {"sysInsert", "Insert external procedure information from system directory"},
            {"libInsert", "Insert external procedure information from library directory"},
            {"batInclude", "Include file with substitution arguments"},
            {"onCmsIncl", "CMS batinclude format on"},
            {"offCmsIncl", "CMS batinclude format off"},
            {"funcLibIn", "Load extrinsic function library"},
            {"goto", "Goto a label"},
            {"label", "Label definition"},
            {"maxGoTo", "Maximum number of jumps to the same label"},
            {"if", "If statement case sensitive"},
            {"ifI", "If statement case insensitive"},
            {"ifE", "If statement with expression evaluation"},
            {"shift", "Shift input arguments"},
            {"onNestCom", "Nested comments on"},
            {"offNestCom", "Nested comments off"},
            {"onInline", "Enable inline comments"},
            {"offInline", "Disable inline comments"},
            {"inlineCom", "Define inline comment"},
            {"onEolCom", "Enable end-of-line comments"},
            {"offEolCom", "Disable end-of-line comments"},
            {"eolCom", "Define end-of-line comments"},
            {"onMultiR", "Multiple data statements on - replacing existing data"},
            {"onMulti", "Multiple data statements on - merging into existing data"},
            {"offMulti", "Multiple data statements off"},
            {"onWarning", "Make errors 115, 116, 170, 171 into warnings"},
            {"offWarning", "Do not convert errors into warnings"},
            {"onSparse", "Allow unsave calculations"},
            {"offSparse", "Do not allow unsave calculations"},
            {"stars", "Define the **** symbol"},
            {"onMixed", "Mixed operation on"},
            {"offMixed", "Mixed operations off"},
            {"onRecurse", "Enable recursive include files"},
            {"offRecurse", "Disable recursive include files"},
            {"onUni", "Allow assignments to predefined symbols"},
            {"offUni", "Do not allow assignments to predefined symbols"},
            {"onEps", "Zeros in data statements are entered as EPS"},
            {"offEps", "Zeros in data statements are entered as zeros"},
            {"onEpsToZero", "Treat eps as zero when unloading to GDX"},
            {"offEpsToZero", "Treat eps as eps when unloading to GDX"},
            {"onDelim", "Delimited data statement syntax on"},
            {"offDelim", "Delimited data statement syntax off"},
            {"onEmpty", "Allow empty data statements"},
            {"offEmpty", "Do not allow empty data statements"},
            {"onStrictSingleton", "Error if assignment to singleton set has multiple elements"},
            {"offStrictSingleton", "Take first record if assignment to singleton set has multiple elements"},
            {"onEnd", "END syntax on"},
            {"offEnd", "END syntax off"},
            {"onListing", "Do not list input lines"},
            {"offListing", "Resume listing input lines"},
            {"error", "Issue an error message"},
            {"abort", "Issue an error message and abort"},
            {"kill", "Removes all data and resets object to uninitialized"},
            {"clear", "Reset objects to all default values"},
            {"slice", "Clears parts of a data structure"},
            {"offLog", "Turn off line logging"},
            {"onLog", "Reset line logging"},
            {"onTroll", "Recognize Troll periodicity in id*id set elements"},
            {"offTroll", "Do not recognize Troll periodicity"},
            {"onOrder", "Lag and lead operations on constant and ordered sets only"},
            {"offOrder", "allow lag and lead operations on dynamic or unordered sets"},
            {"embeddedCode", "Start block of embedded code with substitution (execution time)"},
            {"embeddedCodeS", "Start block of embedded code with substitution (execution time)"},
            {"embeddedCodeV", "Start block of embedded code without substitution (execution time)"},
            {"pauseEmbeddedCode", "Pause block of embedded code (execution time)"},
            {"continueEmbeddedCode", "Continue block of paused embedded code with substitution (execution time)"},
            {"continueEmbeddedCodeS", "Continue block of paused embedded code with substitution (execution time)"},
            {"continueEmbeddedCodeV", "Continue block of paused embedded code without substitution (execution time)"},
            {"endEmbeddedCode", "End block of embedded code (execution time)"},
            {"onEmbeddedCode", "Start block of embedded code with substitution"},
            {"onEmbeddedCodeS", "Start block of embedded code with substitution"},
            {"onEmbeddedCodeV", "Start block of embedded code without substitution"},
            {"offEmbeddedCode", "End block of embedded code"},
            {"scratchFileName", "Set a name for a temporary file in the scratch directory using the scratch file extension"},
            {"onCheckErrorLevel", "Throw compilation error, if errorLevel is not 0 after $[hidden]call"},
            {"offCheckErrorLevel", "Do not check errorLevel automatically after $[hidden]call"},
            {"onFiltered", "Load data domain filtered"},
            {"offFiltered", "Load data domain checked"},
            {"onSuffixDLVars", "Allow domain limited variables with suffixes in model"},
            {"offSuffixDLVars", "Do not allow domain limited variables with suffixes in model"},
            {"onSuffixAlgebraVars", "Allow variables with suffixes in model algebra"},
            {"offSuffixAlgebraVars", "Do not allow variables with suffixes in model algebra"},
            {"onFold", "Start a block that can be collapsed/folded in GAMS Studio"},
            {"offFold", "End a block that can be collapsed/folded in GAMS Studio"},
            {"gdxIn", "Open GDX file for input"},
            {"gdxOut", "Open GDX file for output"},
            {"gdxLoad", "Load symbols from specified GDX file"},
            {"gdxUnload", "Unload symbols into specified GDX file"},
            {"load", "Load symbols from previously opened GDX file"},
            {"loadR", "Load symbols from previously opened GDX file - replace"},
            {"loadM", "Load symbols from previously opened GDX file - merge"},
            {"loadDc", "Load symbols from previously opened GDX file - domain checked"},
            {"loadDcR", "Load symbols from previously opened GDX file - domain checked - replace"},
            {"loadDcM", "Load symbols from previously opened GDX file - domain checked - merge"},
            {"loadFiltered", "Load symbols from previously opened GDX file - domain filtered"},
            {"loadFilteredR", "Load symbols from previously opened GDX file - domain filtered - replace"},
            {"loadFilteredM", "Load symbols from previously opened GDX file - domain filtered - merge"},
            {"loadIdx", "Load index parameters from GDX with implicit loading of domain - domain checked"},
            {"unload", "Unload symbols into previously opened GDX file"},
            {"setLocal", "Define a local environment variable"},
            {"setGlobal", "Define a global environment variable"},
            {"set", "Define a scoped environment variable"},
            {"evalLocal", "Evaluates and define a local environment variable"},
            {"evalGlobal", "Evaluates and define a global environment variable"},
            {"eval", "Evaluates and define a scoped environment variable"},
            {"setEnv", "Define an OS system environment"},
            {"dropLocal", "Drop a local environment variable"},
            {"dropGlobal", "Drop a global environment variable"},
            {"drop", "Drop a local environment variable"},
            {"dropEnv", "Drop an OS system environment variable"},
            {"setArgs", "Define local environment variables using argument list"},
            {"setNames", "Unpack a filename into local environment variables"},
            {"splitOption", "Split an option value pair string into environment variables"},
            {"setComps", "Unpack dotted names into local variables"},
            {"escape", "Define the % escape symbol"},
            {"onGlobal", "Allow global setting of $options"},
            {"offGlobal", "Do not allow global setting of $options"},
            {"setDdList", "Check double dash GAMS parameters"},
            {"prefixPath", "Prefix the path environment variable"},
            {"show", "Show current GAMS compile-time variables, macros, and active files"},
            {"showFiles", "Show active input and include files"},
            {"showMacros", "Show current macros"},
            {"showVariables", "Show current GAMS compile-time variables"},
            {"macro", "Preprocessing macro definition"},
            {"onMacro", "Recognize macros for expansion"},
            {"offMacro", "Do not recognize macros for expansion"},
            {"onDotL", "Assume .l for variables in assignments"},
            {"offDotL", "Do not assume .l for variables in assignments"},
            {"onExpand", "Expand macros when processing macro arguments"},
            {"offExpand", "Do not expand macros when processing macro arguments"},
            {"offLocal", "Limit .local nesting to one"},
            {"onLocal", "No limit on .local nesting"},
            {"onDotScale", "Assume .scale for var and equ references"},
            {"offDotScale", "do not assume .scale for var and equ references"},
            {"expose", "Remove all access control restrictions"},
            {"protect", "Protect objects from user modification"},
            {"hide", "Hide objects from user"},
            {"purge", "Remove the objects and all associated data"},
            {"compress", "Create compressed GAMS system file"},
            {"encrypt", "Create encrypted GAMS system file"},
            {"decompress", "Decompresses a GAMS system file"},
            {"run", "Not implemented"},
            {"stop", "Stops compilation"},
            {"exit", "Jumps to the end of the current file"},
            {"log", "Send message to the log"},
            {"echo", "Echo a string to a file"},
            {"echoN", "Echo a string to a file without ending the line"},
            {"use205", "Use GAMS version 205 syntax"},
            {"use225", "Use GAMS version 225 syntax"},
            {"use999", "Use current GAMS syntax"},
            {"diff", "Not Implemented"},
            {"onEcho", "Start of block echo with substitution"},
            {"onEchoV", "Start of block echo without substitution"},
            {"onEchoS", "Start of block echo with substitution"},
            {"offEcho", "End of block echo"},
            {"onPut", "Start of block put without substitution"},
            {"onPutV", "Start of block put without substitution"},
            {"onPutS", "Start of block put with substitution"},
            {"offPut", "End of block put"},
            {"clearError", "Clear compilation error"},
            {"clearErrors", "Clear compilation errors"},
            {"warning", "Issue compilation warning"},
            {"terminate", "Terminate compilation and execution"},
            {"remark", "Comment line with suppressed line number"},
            {"onUndf", "Allow UNDF as input"},
            {"offUndf", "Do not allow UNDF as input"},
            {"onEmbedded", "Allow embedded text or data in set and parameter statements"},
            {"offEmbedded", "No embedded test or data allowed"},
            {"onVerbatim", "Start verbatim copy if dumpopt > 9"},
            {"offVerbatim", "Stop verbatim copy"},
            {"ifThen", "If then elseif structure with case sensitive compare"},
            {"ifThenI", "If then elseif structure with case insensitive compare"},
            {"ifThenE", "If then elseif structure with expression evaluation"},
            {"elseIf", "Else if clause structure with case sensitive compare"},
            {"elseIfI", "Else if clause structure with case insensitive compare"},
            {"elseIfE", "Else if clause structure with expression evaluation"},
            {"else", "Else clause"},
            {"endIf", "Closing of IfThen control structure"},
            {"eject", "Start a new page in listing file"},
            {"onECImplicitLoad", "Allow implicit loading from embedded code"},
            {"offECImplicitLoad", "Do not allow implicit loading from embedded code"},
            {"save", "Create save file from source compiled so far"},
        };
        return list;
    }

    static const QList<QPair<QString, QString>> systemAttributes() {
        static const QList<QPair<QString, QString>> list = {
            {"Page", "Current page number"},
            {"ILine", "Current source line number beeing executed"},
            {"OPage", "Current listing page number"},
            {"Elapsed", "Elasped time in seconds since start of job"},
            {"Memory", "Memory in use"},
            {"TStart", "Time to restart GAMS"},
            {"TClose", "Time to save GAMS"},
            {"TComp", "Time to compile"},
            {"TExec", "Time to execute"},
            {"IncParentL", "Include file parent line number"},
            {"IncLine", "Include file line"},
            {"Line", "Line number in source code"},
            {"ListLine", "Line number on listing file"},
            {"PrLine", "Line on listing page"},
            {"PrPage", "Listing page number"},
            {"LicenseLevel", "GAMS license level"},
            {"IsAlphaBeta", "Indicates an Alpha or Beta bulid"},
            {"MaxInput", "Max input line length that can be processed"},
            {"Date", "Job date"},
            {"Time", "Job time"},
            {"Title", "Current listing title"},
            {"SFile", "Save file name"},
            {"RTime", "Restart file time"},
            {"RDate", "Restart file date"},
            {"RFile", "Restart file name"},
            {"IFile", "Input file"},
            {"OFile", "Output (Listing) file"},
            {"Version", "GAMS compiler version"},
            {"Platform", "Job platform"},
            {"GString", "GAMS system audit string"},
            {"SString", "Subsystem (Solver) audit string"},
            {"PFile", "Current put file"},
            {"VerID", "GAMS version ID"},
            {"Date1", "Job date format"},
            {"Tab", "Tab character"},
            {"IncParent", "Include file parent"},
            {"IncName", "Include file name"},
            {"FileSys", "Operating system type"},
            {"FE", "File extension"},
            {"FN", "File name"},
            {"FP", "File path"},
            {"ReDirLog", "Append redirection string into the logfile"},
            {"NullFile", "The null filename"},
            {"ErrorLevel", "System Errorlevel"},
            {"HostPlatform", "Host platform"},
            {"GamsVersion", "GAMS version number"},
            {"GdxFileNameIn", "Standard gdx file name for input"},
            {"GdxFileNameOut", "Standard gdx file name for output"},
            {"BuildCode", "System build code"},
            {"GamsRelease", "GAMS Release number"},
            {"PutFileName", "The filename of the currently active PUT file"},
            {"JobHandle", "Job handle of last async call"},
            {"UserName", "Operating system user name"},
            {"ComputerName", "Operating system computer name"},
            {"GamsReleaseMaint", "GAMS Release number with maintenance number suffix"},
            {"DirSep", "File or directory separator in file names"},
            {"MACAddress", "MAC address of the first network adapter"},
            {"UserConfigDir", "User writable directory that is searched for gamsconfig.yaml"},
            {"UserDataDir", "User writable directory that is searched for gamslice.txt and others"},
            {"LicenseFileName", "The file name of the license file currently used"},
        };
        return list;
    }

    static const QList<QPair<QString, QString>> systemData() {
        static const QList<QPair<QString, QString>> list = {
            {"dollarOptions", "Dollar control options"},
            {"empty", "Empty label"},
            {"gamsParameters", "Command line parameters"},
            {"gamsParameterSynonyms", "Synonyms for command line parameters"},
            {"gamsParameterSynonymMap", "Map between command line parameters and their synonyms"},
            {"gamsFunctions", "Intrinsic functions"},
            {"GUSSModelAttributes", "Model attributes stored for GUSS scenarios"},
            {"modelTypes", "Model types"},
            {"platforms", "Platform code"},
            {"powerSetLeft", "Numbering system with base b and s digits"},
            {"powerSetRight", "Numbering system with base b and s digits"},
            {"predefinedSymbols", "Predefined symbols"},
            {"setConstants", "System data names"},
            {"solverNames", "Names of solvers and tools"},
            {"solverPlatformMap", "Map between solvers and platforms"},
            {"solverTypePlatformMap", "Map between solvers, model types and platforms"},
            {"systemSuffixes", "System suffixes"},
        };
        return list;
    }

    static const QList<QPair<QString, QString>> systemCTConstText() {
        static const QList<QPair<QString, QString>> list = {
            {"solPrint", "Solution report print"},
            {"handleStatus", "Status of model instance"},
            {"solveLink", "Solver link option"},
            {"solveOpt", "Multiple solve management"},
            {"solveStat", "Solver status"},
            {"modelStat", "Model status"},
            {"platformCode", "Platform Code"},
        };
        return list;
    }

    static const QList<QPair<QString, int>> systemCTConstants() {
        static const QList<QPair<QString, int>> list = {
            {"solPrint.Summary", 0},
            {"solPrint.Report", 1},
            {"solPrint.Quiet", 2},
            {"solPrint.Off", 0},
            {"solPrint.On", 1},
            {"solPrint.Silent", 2},
            {"handleStatus.Unknown", 0},
            {"handleStatus.Running", 1},
            {"handleStatus.Ready", 2},
            {"handleStatus.Failure", 3},
            {"solveLink.Chain Script", 0},
            {"solveLink.Call Script", 1},
            {"solveLink.Call Module", 2},
            {"solveLink.Async Grid", 3},
            {"solveLink.Async Simulate", 4},
            {"solveLink.Load Library", 5},
            {"solveLink.ASync Threads", 6},
            {"solveLink.Threads Simulate", 7},
            {"solveOpt.Replace", 0},
            {"solveOpt.Merge", 1},
            {"solveOpt.Clear", 2},
            {"solveStat.Normal Completion", 1},
            {"solveStat.Iteration Interrupt", 2},
            {"solveStat.Resource Interrupt", 3},
            {"solveStat.Terminated By Solver", 4},
            {"solveStat.Evaluation Interrupt", 5},
            {"solveStat.Capability Problems", 6},
            {"solveStat.Licensing Problems", 7},
            {"solveStat.User Interrupt", 8},
            {"solveStat.Setup Failure", 9},
            {"solveStat.Solver Failure", 10},
            {"solveStat.Internal Solver Failure", 11},
            {"solveStat.Solve Processing Skipped", 12},
            {"solveStat.System Failure", 13},
            {"modelStat.Optimal", 1},
            {"modelStat.Locally Optimal", 2},
            {"modelStat.Unbounded", 3},
            {"modelStat.Infeasible", 4},
            {"modelStat.Locally Infeasible", 5},
            {"modelStat.Intermediate Infeasible", 6},
            {"modelStat.Feasible Solution", 7},
            {"modelStat.Integer Solution", 8},
            {"modelStat.Intermediate Non-Integer", 9},
            {"modelStat.Integer Infeasible", 10},
            {"modelStat.Licensing Problem", 11},
            {"modelStat.Error Unknown", 12},
            {"modelStat.Error No Solution", 13},
            {"modelStat.No Solution Returned", 14},
            {"modelStat.Solved Unique", 15},
            {"modelStat.Solved", 16},
            {"modelStat.Solved Singular", 17},
            {"modelStat.Unbounded - No Solution", 18},
            {"modelStat.Infeasible - No Solution", 19},
            {"platformCode.Unknown", 0},
            {"platformCode.DEG", 1},
            {"platformCode.LEG", 2},
            {"platformCode.WEX", 3},
        };
        return list;
    }

    static const QList<QPair<QString, QString>> modelTypes() {
        static const QList<QPair<QString, QString>> list = {
            {"LP", "Linear Programming - default solver"},
            {"MIP", "Mixed-Integer Programming - default solver"},
            {"RMIP", "Relaxed Mixed-Integer Programming - default solver"},
            {"NLP", "Non-Linear Programming - default solver"},
            {"MCP", "Mixed Complementarity Problems - default solver"},
            {"MPEC", "Mathematical Programs with Equilibrium Constraints - default solver"},
            {"RMPEC", "Relaxed Mathematical Programs with Equilibrium Constraints - default solver"},
            {"CNS", "Constrained Nonlinear Systems - default solver"},
            {"DNLP", "Non-Linear Programming with Discontinuous Derivatives - default solver"},
            {"RMINLP", "Relaxed Mixed-Integer Non-Linear Programming - default solver"},
            {"MINLP", "Mixed-Integer Non-Linear Programming - default solver"},
            {"QCP", "Quadratically Constrained Programs - default solver"},
            {"MIQCP", "Mixed Integer Quadratically Constrained Programs - default solver"},
            {"RMIQCP", "Relaxed Mixed Integer Quadratically Constrained Programs - default solver"},
            {"EMP", "Extended Mathematical Programs - default solver"},
        };
        return list;
    }

    static const QList<QPair<QString, QString>> options() {
        static const QList<QPair<QString, QString>> list = {
            {"AsyncSolLst", "Print solution listing when asynchronous solve (Grid or Threads) is used"},
            {"Bratio", "Basis detection threshold"},
            {"CheckErrorLevel", "Check errorLevel automatically after executing external program"},
            {"Decimals", "Decimal places for display statements"},
            {"DispWidth", "Number of characters to be printed in the column labels of all subsequent display statements"},
            {"DmpOpt", "Debugging option: causes GAMS to echo the runtime option settings"},
            {"DmpSym", "Debugging option: causes GAMS to echo the symbol table to the listing file"},
            {"DmpUserSym", "Debugging option: causes GAMS to echo the symbol table to the listing file for user defined symbols only"},
            {"DomLim", "Domain violation limit solver default"},
            {"DualCheck", "Output on the reduced cost condition"},
            {"ECImplicitLoad", "Allow implicit loading of symbols from embedded code or not"},
            {"Eject", "Inject a page break into the LST file"},
            {"EpsToZero", "Treat eps as zero when unloading to GDX"},
            {"FDDelta", "Step size for finite differences"},
            {"FDOpt", "Options for finite differences"},
            {"ForLim", "GAMS looping limit"},
            {"gdxUels", "Unload labels or UELs to GDX either squeezed or full"},
            {"HoldFixedAsync", "Allow HoldFixed for models solved asynchronously as well"},
            {"IDCProtect", "Flag to control assignment protection of external input symbols"},
            {"Integer1", "Integer communication cell N"},
            {"Integer2", "Integer communication cell N"},
            {"Integer3", "Integer communication cell N"},
            {"Integer4", "Integer communication cell N"},
            {"Integer5", "Integer communication cell N"},
            {"IntVarUp", "Set mode for default upper bounds on integer variables"},
            {"IterLim", "Iteration limit of solver"},
            {"LimCol", "Maximum number of columns listed in one variable block"},
            {"LimRow", "Maximum number of rows listed in one equation block"},
            {"MaxGenericFiles", "Maximum number of generic file names tried at execution time file creation"},
            {"MCPRHoldfx", "Print list of rows that are perpendicular to variables removed due to the holdfixed setting"},
            {"Measure", "Output of time and memory use since the last measure statement or the program beginning"},
            {"MemoryStat", "Show memory statistics in the LST file"},
            {"OptCA", "Absolute Optimality criterion solver default"},
            {"OptCR", "Relative Optimality criterion solver default"},
            {"Profile", "Execution profiling"},
            {"ProfileTol", "Minimum time a statement must use to appear in profile generated output"},
            {"Real1", "Real communication cell N"},
            {"Real2", "Real communication cell N"},
            {"Real3", "Real communication cell N"},
            {"Real4", "Real communication cell N"},
            {"Real5", "Real communication cell N"},
            {"Reform", "Reformulation level"},
            {"ResLim", "Wall-clock time limit for solver"},
            {"SavePoint", "Save solver point in GDX file"},
            {"Seed", "Random number seed"},
            {"SolPrint", "Solution report print option"},
            {"SolSlack", "Causes the equation output in the listing file to contain slack variable values instead of level values"},
            {"SolveLink", "Solver link option"},
            {"SolveOpt", "Multiple solve management"},
            {"Solver", "Default solver for all model types that the solver is capable to process"},
            {"strictSingleton", "Error if assignment to singleton set has multiple elements"},
            {"SubSystems", "Lists all solvers available as well as the current default and active solvers in the LST file"},
            {"Sys10", "Changes rpower to ipower when the exponent is constant and within 1e-12 of an integer"},
            {"Sys11", "Dynamic resorting if indices in assignment/data statements are not in natural order"},
            {"Sys12", "Pass model with generation errors to solver"},
            {"Sys15", "Automatic switching of data structures used in search records"},
            {"Sys16", "Disable search record memory (aka execute this as pre-GAMS 24.5)"},
            {"Sys17", "Disable sparsity trees growing with permutation (aka execute this as pre-GAMS 24.5)"},
            {"Sys18", "Use backward compatible (i.e. pre-GAMS 31) scheme for reading floating-point numbers"},
            {"Sys19", "Disable permutation on Column Generation (aka execute this as pre-GAMS 36)"},
            {"SysOut", "Solver Status file reporting option"},
            {"Threads", "Number of threads to be used by a solver"},
            {"ThreadsAsync", "Limit on number of threads to be used for asynchronous solves (solveLink=6)"},
            {"ZeroToEps", "Treat zero as eps"},
        };
        return list;
    }

    static const QList<QPair<QString, QString>> execute() {
        static const QList<QPair<QString, QString>> list = {
            {"async", "Execute external program asynchronously"},
            {"asyncIC", "Execute external program asynchronously"},
            {"asyncNC", "Execute external program asynchronously in a new console"},
            {"sync", "Execute external program synchronously"},
            {"embedded", "Execute embedded code"},
            {"checkErrorLevel", "Check errorLevel automatically after executing external program"},
        };
        return list;
    }

    static const QList<QPair<QString, QString>> keyExecute() {
        static const QList<QPair<QString, QString>> list = {
            {"execute", "Execute a program"},
        };
        return list;
    }

    static const QList<QPair<QString, QString>> keyOption() {
        static const QList<QPair<QString, QString>> list = {
            {"option", "Set global system parameters"},
            {"options", "Set global system parameters"},
        };
        return list;
    }

    static const QList<QPair<QString, QString>> keyPut() {
        static const QList<QPair<QString, QString>> list = {
            {"put", "Write output to defined file"},
            {"put_utilities", "Execute external programs using put syntax"},
            {"put_utility", "Execute external programs using put syntax"},
            {"putclear", "Delete the title and header blocks of a put file"},
            {"putclose", "Close a put file (and write to it)"},
            {"putfmcl", "Delete the title and header blocks of a put file"},
            {"puthd", "Write to the header block of a put page"},
            {"putheader", "Write to the header block of a put page"},
            {"putpage", "Start a new page in a put file"},
            {"puttitle", "Write to the title block of a put page"},
            {"puttl", "Write to the title block of a put page"},
        };
        return list;
    }

    static const QList<QPair<QString, QString>> keySolve() {
        static const QList<QPair<QString, QString>> list = {
            {"solve", "Call available solver to solve the model"},
        };
        return list;
    }

    static const QList<QPair<QString, QString>> reserved() {
        static const QList<QPair<QString, QString>> list = {
            {"abort", "Terminate the execution of a program"},
            {"Acronym", "Special data type that allows the use of strings as values"},
            {"Acronyms", "Special data types that allow the use of strings as values"},
            {"Alias", "Alternative name for a set"},
            {"all", "Shorthand for all known (declared) equations"},
            {"and", "Two logical conditions are TRUE simultaneously"},
            {"break", "Break the execution of a loop structure prematurely"},
            {"card", "Number of elements in a set"},
            {"continue", "Jump to the end of the inner most loop structure without executing the remaining statements in the body"},
            {"display", "Write data into the listing file"},
            {"do", "Start of a control structure"},
            {"else", "Alternative for conditional statement"},
            {"elseif", "Alternative for conditional statement with new conditional statement"},
            {"endfor", "End of for loop"},
            {"endif", "End of if statements"},
            {"endloop", "End of loop"},
            {"endwhile", "End of while loop"},
            {"eps", "A stored zero value"},
//            {"execute", "Execute a program"},  // separate subset SyntaxKind::Execute; see keyExecute
            {"execute_load", "Load data from GDX at execution time replacing existing data"},
            {"execute_loaddc", "Load data from GDX at execution time replacing existing data and throwing an error for domain violations"},
            {"execute_loadhandle", "Load solution from a Grid solve"},
            {"execute_loadpoint", "Load data from GDX at execution time merging with existing data"},
            {"execute_unload", "Unload data to GDX at execution time"},
            {"execute_unloaddi", "Unload data to GDX at execution time implicitly including all domain sets used"},
            {"execute_unloadidx", "Unload data to GDX at execution time for indexed parameters only"},
            {"for", "Start of a for loop"},
            {"if", "Start of conditional statement"},
            {"inf", "Infinity"},
            {"logic", "Logic equation using Boolean algebra"},
            {"loop", "Start of a loop"},
            {"na", "Not available - used to indicate missing data"},
            {"no", "Remove element from a dynamic set"},
            {"not", "The logical condition x has to be FALSE, in order for the expression to be TRUE"},
//          {"option", ""},      // separate subset SyntaxKind::Option; see keyOption
//          {"options", ""},     // separate subset SyntaxKind::Option; see keyOption
            {"ord", "Relative position of an element in a set"},
            {"or", "At least one of two logical conditions applies"},
//            {"ordascii", ""},    // dropped long time ago, with 23.7
//            {"ordebcdic", ""},   // dropped long time ago, with 23.7
//            {"procedure", ""},   // dropped long time ago
//            {"procedures", ""},  // dropped long time ago
            {"prod", "Product over index set"},
            {"repeat", "Start of a repeat loop"},
            {"sand", "All terms over index set are true/non-zero"},
            {"smax", "Maximum of index set"},
            {"smin", "Minimum of index set"},
//          {"solve", ""},       // separate subset SyntaxKind::Solve; see keySolve
            {"sor", "At least on term over index set is true/non-zero"},
            {"sum", "Summation over index set"},
            {"system", "String constants of GAMS environment"},
            {"then", "Start of if body"},
            {"undf", "Undefined - indicates the result of an undefined or illegal operation"},
            {"until", "End of a repeat loop"},
            {"while", "Start of a while loop"},
            {"xor", "Exactly one of two logical conditions applies"},
            {"yes", "Add element to a dynamic set"},
            {"abs", "absolute"},
            {"arccos", "inverse-cosinus"},
            {"arcsin", "inverse-sinus"},
            {"arctan", "arctangent"},
            {"arctan2", "arctan2"},
            {"Beta", "beta function"},
            {"BetaReg", "regularized beta function"},
            {"Binomial", "(generalized) binomial coefficient"},
            {"bool_and", "boolean and"},
            {"bool_eqv", "boolean equivalence"},
            {"bool_imp", "boolean implication"},
            {"bool_not", "boolean not"},
            {"bool_or", "boolean or"},
            {"bool_xor", "boolean xor"},
            {"ceil", "ceiling"},
            {"Centropy", "Centropy: x*ln((x+d)/(y+d))"},
            {"cos", "cosinus"},
            {"cosh", "hyperbolic cosine"},
            {"cvPower", "c**y"},
            {"div", "division"},
            {"div0", "division"},
            {"EDist", "Euclidean or L-2 Norm: Sqrt( x1^2 + x2^2 + .. )"},
            {"EmbeddedHandle", "Embedded Code Library Handle"},
            {"Entropy", "Entropy: -x*ln(x)"},
            {"errorf", "error function"},
            {"ErrorLevel", "errorlevel"},
            {"execerror", "execution errors"},
            {"execseed", "extract random seed"},
            {"exp", "exponential"},
            {"Fact", "factorial"},
            {"floor", "floor"},
            {"ForceError", "ForceError(x1,d,t,v,e,r) forces errors after t calls"},
            {"ForceErrorCnt", "ForceErrorCnt sets foceerrorcount"},
            {"frac", "fraction mod(x,1)"},
            {"Gamma", "gamma function"},
            {"GammaReg", "regularized gamma function"},
            {"GamsRelease", "Gams release number"},
            {"GamsVersion", "Gams version number"},
            {"gday", "extract Gregorian day   from Julian date.time"},
            {"gdow", "extract Gregorian day of week from Julian date.time"},
            {"ghour", "extract Gregorian hour  from Julian date.time"},
            {"gleap", "extract Gregorian leapyear from Julian date.time"},
            {"Gmillisec", "extract Gregorian milli second from Julian date.time"},
            {"gminute", "extract Gregorian minute from Julian date.time"},
            {"gmonth", "extract Gregorian month from Julian date.time"},
            {"gsecond", "extract Gregorian second from Julian date.time"},
            {"gyear", "extract Gregorian year  from Julian date.time"},
            {"HandleCollect", "Collects Model Handle Results"},
            {"HandleDelete", "Deletes Model Handle Directory"},
            {"HandleStatus", "Model handle status"},
            {"HandleSubmit", "Resubmit Model Handle"},
            {"HeapFree", "heapfree in MB"},
            {"HeapLimit", "Heap Limit in MB"},
            {"HeapSize", "heapsize in MB"},
            {"IfThen", "if(cond,then,else)"},
            {"jdate", "julian day"},
            {"jnow", "job current time"},
            {"JobHandle", "JobHandle"},
            {"JobKill", "JobKill"},
            {"JobStatus", "JobStatus"},
            {"JobTerminate", "JobTerminate"},
            {"jstart", "job start time"},
            {"jtime", "juliab time"},
            {"LicenseLevel", "License Level"},
            {"LicenseStatus", "License Status"},
            {"log", "logarithm base e"},
            {"log10", "logarithm base 10"},
            {"log2", "logarithm base 2"},
            {"LogBeta", "log beta function"},
            {"LogGamma", "log gamma function"},
            {"Logit", "Logit transformation: ln(p/(1-p))"},
            {"mapval", "maps special values"},
            {"MathLastEC", "last math exception code"},
            {"MathLastRC", "last math return code"},
            {"MathOVal", "math overflow value"},
            {"max", "max(x,y)"},
            {"MaxExecError", "max execution errors"},
            {"min", "min(x,y)"},
            {"mod", "modulus"},
            {"NcpCM", "NCP Chen-Mangasarian: x1 - x3*ln(1+exp((x1-x2)/x3)), g3 = 0, x3 > 0"},
            {"NcpF", "NCP Fischer: sqrt(x1^2 + x2^2 + 2*x3) - x1 - x2, g3 = 0, x3 >= 0"},
            {"NcpVUpow", "NCP Veelken-Ulbrich: smoothed min, g3 = 0, x3 >= 0"},
            {"NcpVUsin", "NCP Veelken-Ulbrich: smoothed min, g3 = 0, x3 >= 0"},
            {"normal", "normal random number with mean arg1 and std arg2"},
            {"NumCores", "Number of logical cores"},
            {"PI", "the constant PI"},
            {"PlatformCode", "Job platform code"},
            {"Poly", "Simple Polynomials"},
            {"power", "integer power"},
            {"RandBinomial", "Binomial(n,p) random number"},
            {"RandLinear", "Linear(low,slope,high) random number"},
            {"RandTriangle", "RandTriangle(low,median,high) random number"},
            {"rel_eq", "relation eq ="},
            {"rel_ge", "relation ge >="},
            {"rel_gt", "relation gt >"},
            {"rel_le", "relation le <="},
            {"rel_lt", "relation lt <"},
            {"rel_ne", "relation ne <>"},
            {"round", "rounding"},
            {"rPower", "real power"},
            {"Sigmoid", "Sigmoid: 1/(1 + exp(-x))"},
            {"sign", "sign(x)"},
            {"SignPower", "signed power sign(x)*abs(x)**c"},
            {"sin", "sinus"},
            {"sinh", "hyperbolic sine"},
            {"sleep", "sleep"},
            {"slexp", "smooth (linear) exponential"},
            {"sllog10", "smooth (linear) logarithm base 10"},
            {"slrec", "smooth (linear) reciprocal"},
            {"sqexp", "smooth (quadratic) exponential"},
            {"sqlog10", "smooth (quadratic) logarithm base 10"},
            {"sqr", "square"},
            {"sqrec", "smooth (quadratic) reciprocal"},
            {"sqrt", "squareroot"},
            {"tan", "tangent"},
            {"tanh", "hyperbolic tangent"},
            {"timeclose", "close time"},
            {"timecomp", "compilation time"},
            {"TimeElapsed", "elapsed time"},
            {"timeexec", "execution time"},
            {"timestart", "start time"},
            {"trunc", "truncation"},
            {"uniform", "uniform random number between arg1 and arg2"},
            {"UniformInt", "uniform integer random number"},
            {"vcPower", "x**c"},
        };
        return list;
    }

    static const QList<QPair<QString, QString>> embedded() {
        static const QList<QPair<QString, QString>> list = {
            {"embeddedCode", "Start block of embedded code with substitution (execution time)"},
            {"embeddedCodeS", "Start block of embedded code with substitution (execution time)"},
            {"embeddedCodeV", "Start block of embedded code without substitution (execution time)"},
            {"continueEmbeddedCode", "Continue block of paused embedded code with substitution (execution time)"},
            {"continueEmbeddedCodeS", "Continue block of paused embedded code with substitution (execution time)"},
            {"continueEmbeddedCodeV", "Continue block of paused embedded code without substitution (execution time)"},
        };
        return list;
    }

    static const QList<QPair<QString, QString>> embeddedEnd() {
        static const QList<QPair<QString, QString>> list = {
            {"pauseEmbeddedCode", "Pause block of embedded code (execution time)"},
            {"endEmbeddedCode", "End block of embedded code (execution time)"},
        };
        return list;
    }

    static const QList<QPair<QString, QString>> declaration4Set() {
        static const QList<QPair<QString, QString>> list = {
            {"Singleton", "Set that has at most one element"},
        };
        return list;
    }

    static const QList<QPair<QString, QString>> declaration4Var() {
        static const QList<QPair<QString, QString>> list = {
            {"Binary", "Discrete variable that can only take values of 0 or 1"},
            {"Free", "No bounds on variable"},
            {"Integer", "Discrete variable that can only take integer values between the bounds"},
            {"Negative", "No positive values are allowed for variable"},
            {"NonNegative", "No negative values are allowed for variable"},
            {"Positive", "No negative values are allowed for variable"},
            {"SemiCont", "Semi-continuous, must be zero or above a given minimum level"},
            {"SemiInt", "Semi-integer, must be zero or above a given minimum level and integer"},
            {"SOS1", "A set of variables, such that at most one variable within a group may have a non-zero value"},
            {"SOS2", "A set of variables, such that at most two variables within a group may have non-zero values and the two non-zero values are adjacent"},
        };
        return list;
    }

    static const QList<QPair<QString, QString>> declaration() {
        static const QList<QPair<QString, QString>> list = {
            {"Equation", "Symbol associated with the symbolic algebraic relationships that will be used to generate the constraints in a model"},
            {"Equations", "Symbols associated with the symbolic algebraic relationships that will be used to generate the constraints in a model"},
            {"File", "External file that is written to with the put writing facility"},
            {"Files", "External files that are written to with the put writing facility"},
            {"Function", "Extrinsic function"},
            {"Functions", "Extrinsic functions"},
            {"Model", "Collection of equations to be solved"},
            {"Models", "Collections of equations to be solved"},
            {"Parameter", "List oriented data, defined over one or more sets"},
            {"Parameters", "List oriented data, defined over one or more sets"},
            {"Scalar", "Single data entry"},
            {"Scalars", "Single data entries"},
            {"Set", "Set of elements"},
            {"Sets", "Sets of elements"},
            {"Table", "Table oriented data, must involve two or more dimensions"},
            {"Variable", "Entity whose value is generally unknown until after a model has been solved"},
            {"Variables", "Entities whose values are generally unknown until after a model has been solved"},
        };
        return list;
    }

    static const QList<QPair<QString, QString>> extendableKey() {
        static const QList<QPair<QString, QString>> list = {
            {"min", "minimize"},
            {"max", "maximize"},
            {"us", "using"},
        };
        return list;
    }

};


} // namespace syntax
} // namespace studio
} // namespace gams

#endif // SYNTAXDATA_H
